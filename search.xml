<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Symbol</title>
      <link href="/2019/03/13/Symbol/"/>
      <url>/2019/03/13/Symbol/</url>
      <content type="html"><![CDATA[<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><blockquote><p>概念<br>ES5的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eg:var a = &#123; name: &apos;lucy&apos;&#125;;</span><br><span class="line"></span><br><span class="line">a.name = &apos;lili&apos;;</span><br><span class="line">这样就会重写属性</span><br></pre></td></tr></table></figure><blockquote><p>Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）<br>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。</p></blockquote><p><strong>Symbol值通过Symbol函数生成,不能用new命令，基本上，它是一种类似于字符串的数据类型。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let s = Symbol();</span><br><span class="line"></span><br><span class="line">typeof s</span><br><span class="line">// &quot;Symbol&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Symbol可以接收字符串 为参数  Symbol值可以显示转为字符串 下面提到</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s1 = Symbol(&apos;foo&apos;);</span><br><span class="line">s1 // Symbol(foo)</span><br><span class="line">s1.toString() // &quot;Symbol(foo)&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Symbol 接收参数是一个对象的话 就会调用该对象的toString方法，将其转为字符串，然后才生成一个 Symbol 值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">toString() &#123;</span><br><span class="line">    return &apos;abc&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">const sym = Symbol(obj);</span><br><span class="line">sym // Symbol(abc)</span><br></pre></td></tr></table></figure><p><strong>Symbol函数是为了独一无二，相同参数的Symbol函数的返回值是不相等的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 没有参数的情况</span><br><span class="line">var s1 = Symbol();</span><br><span class="line">var s2 = Symbol();</span><br><span class="line"></span><br><span class="line">s1 === s2 // false</span><br><span class="line"></span><br><span class="line">// 有参数的情况</span><br><span class="line">var s1 = Symbol(&apos;foo&apos;);</span><br><span class="line">var s2 = Symbol(&apos;foo&apos;);</span><br><span class="line"></span><br><span class="line">s1 === s2 // false</span><br></pre></td></tr></table></figure><p><em>++++++s1和s2是两个Symbol值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</em></p><p><strong>Symbol值不能与其他类型的值进行运算，会报错。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var sym = Symbol(&apos;My Symbol&apos;);</span><br><span class="line"></span><br><span class="line">&quot;your Symbol is &quot; + sym</span><br><span class="line">// TypeError: can&apos;t convert Symbol to string</span><br><span class="line">`your Symbol is $&#123;sym&#125;`</span><br><span class="line">// TypeError: can&apos;t convert Symbol to string</span><br></pre></td></tr></table></figure><p><strong>Symbol值可以显式转为字符串,也可以转为布尔值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var sym = Symbol(&apos;My Symbol&apos;);</span><br><span class="line"></span><br><span class="line">String(sym) // &apos;Symbol(My Symbol)&apos;</span><br><span class="line">sym.toString() // &apos;Symbol(My Symbol)&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var sym = Symbol();</span><br><span class="line">Boolean(sym) // true</span><br><span class="line">!sym  // false</span><br><span class="line"></span><br><span class="line">if (sym) &#123;</span><br><span class="line">// ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Number(sym) // TypeError: Cannot convert a Symbol value to a number</span><br><span class="line">sym + 2 // TypeError: Cannot convert a Symbol value to a number</span><br></pre></td></tr></table></figure><hr><h4 id="作为属性名的Symbol"><a href="#作为属性名的Symbol" class="headerlink" title="作为属性名的Symbol"></a>作为属性名的Symbol</h4><blockquote><p>由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p></blockquote><blockquote><p>下面代码通过方括号结构和Object.defineProperty，将对象的属性名指定为一个Symbol值。</p></blockquote><figure class="highlight plain"><figcaption><span>mySymbol </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 第一种写法</span><br><span class="line">var a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = &apos;Hello!&apos;;</span><br><span class="line"></span><br><span class="line">// 第二种写法</span><br><span class="line">var a = &#123;</span><br><span class="line">[mySymbol]: &apos;Hello!&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 第三种写法</span><br><span class="line">var a = &#123;&#125;;</span><br><span class="line">Object.defineProperty(a, mySymbol, &#123; value: &apos;Hello!&apos; &#125;);</span><br><span class="line"></span><br><span class="line">// 以上写法都得到同样结果</span><br><span class="line">a[mySymbol]  // &quot;Hello!&quot;</span><br></pre></td></tr></table></figure><p>还有一种是点运算符 赋值 先看下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> var mySymbol = Symbol();</span><br><span class="line"> var a = &#123;&#125;;</span><br><span class="line"> a.mySymbol = &apos;Hello!&apos;;</span><br><span class="line"> console.log(a.mySymbol)</span><br><span class="line"> console.log(a[mySymbol])</span><br><span class="line"> console.log(a[&apos;mySymbol&apos;])</span><br><span class="line">// VM642:5 Hello!</span><br><span class="line">// undefined</span><br><span class="line">// VM642:6 Hello!</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var mySymbol = Symbol();</span><br><span class="line">var a = &#123;&#125;;</span><br><span class="line">a.mySymbol = &apos;Hello me!&apos;;</span><br><span class="line">a[mySymbol] = &apos;Hello you!&apos;;</span><br><span class="line">console.log(a.mySymbol)   //</span><br><span class="line">console.log(a[mySymbol])  //  你猜</span><br><span class="line">console.log(a[&apos;mySymbol&apos;])  //</span><br></pre></td></tr></table></figure><p><strong>因为点运算符后面总是字符串，所以不会读取mySymbol作为标识名所指代的那个值，导致a的属性名实际上是一个字符串，而不是一个Symbol值。</strong></p><blockquote><p><strong>*</strong>在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中。   [Symbol(‘你想要的’)]：‘你想要的’ 取值一直没找到问题所在</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let s = Symbol();</span><br><span class="line">let obj = &#123;</span><br><span class="line">  [s](arg) &#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let myobj = &#123;</span><br><span class="line">    [Symbol(&apos;name&apos;)]:&apos;yongge&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出yonge</span><br></pre></td></tr></table></figure><h4 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h4><blockquote><p>Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。</p></blockquote><blockquote><p>Object.getOwnPropertySymbols方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">var a = Symbol(&apos;a&apos;);</span><br><span class="line">var b = Symbol(&apos;b&apos;);</span><br><span class="line"></span><br><span class="line">obj[a] = &apos;Hello&apos;;</span><br><span class="line">obj[b] = &apos;World&apos;;</span><br><span class="line"></span><br><span class="line">obj // &#123;Symbol(a): &quot;Hello&quot;, Symbol(b): &quot;World&quot;&#125;</span><br><span class="line"></span><br><span class="line">var objectSymbols = Object.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line">// [Symbol(a), Symbol(b)]</span><br></pre></td></tr></table></figure><blockquote><p>另一个例子，Object.getOwnPropertySymbols方法与for…in循环、Object.getOwnPropertyNames方法进行对比的例子。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">var foo = Symbol(&quot;foo&quot;);</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, foo, &#123; value: &quot;foobar&quot;&#125;);</span><br><span class="line"></span><br><span class="line">for (var i in obj) &#123;</span><br><span class="line">  console.log(i); // 无输出</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.getOwnPropertyNames(obj)</span><br><span class="line">// []</span><br><span class="line"></span><br><span class="line">Object.getOwnPropertySymbols(obj)</span><br><span class="line">// [Symbol(foo)]</span><br></pre></td></tr></table></figure><blockquote><p>使用Object.getOwnPropertyNames方法得不到Symbol属性名，需要使用Object.getOwnPropertySymbols方法。另一个新的API，Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">  [Symbol(&apos;my_key&apos;)]: 1,</span><br><span class="line">  enum: 2,</span><br><span class="line">  nonEnum: 3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Reflect.ownKeys(obj)</span><br><span class="line">// [Symbol(my_key), &apos;enum&apos;, &apos;nonEnum&apos;]</span><br></pre></td></tr></table></figure><h4 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h4><blockquote><p>Symbol.for()  首先在全局中搜索有没有以该参数作为名称的Symbol值，如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。和直接的Symbol就点不同了。<br>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30次，每次都会返回同一个 Symbol 值，但是调用Symbol(“cat”)30次，会返回30个不同的Symbol值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var s1 = Symbol.for(&apos;foo&apos;);</span><br><span class="line">var s2 = Symbol.for(&apos;foo&apos;);</span><br><span class="line"></span><br><span class="line">s1 === s2 // true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Symbol.for(&quot;bar&quot;) === Symbol.for(&quot;bar&quot;)</span><br><span class="line">// true</span><br><span class="line"></span><br><span class="line">Symbol(&quot;bar&quot;) === Symbol(&quot;bar&quot;)</span><br><span class="line">// false</span><br></pre></td></tr></table></figure><blockquote><p>Symbol.keyFor方法返回一个已登记的Symbol类型值的key。实质就是检测该Symbol是否已创建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var s1 = Symbol.for(&quot;foo&quot;);</span><br><span class="line">Symbol.keyFor(s1) // &quot;foo&quot;</span><br><span class="line"></span><br><span class="line">var s2 = Symbol(&quot;foo&quot;);</span><br><span class="line">Symbol.keyFor(s2) // undefined</span><br></pre></td></tr></table></figure><h4 id="内置Symbol"><a href="#内置Symbol" class="headerlink" title="内置Symbol"></a>内置Symbol</h4><p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法</p><p>　　1、Symbol.haslnstance</p><p>　　一个在执行instanceof时调用的内部方法，用于检测对象的继承信息</p><p>　　2、Symbol.isConcatSpreadable</p><p>　　一个布尔值，用于表示当传递一个集合作为Array.prototype.concat()方法的参数时，是否应该将集合内的元素规整到同一层级</p><p>　　3、Symbol.iterator</p><p>　　一个返回迭代器的方法</p><p>　　4、Symbol.match</p><p>　　一个在调用String.prototype.match()方法时调用的方法，用于比较字符串</p><p>　　5、Symbol.replace</p><p>　　一个在调用String.prototype.replace()方法时调用的方法，用于替换字符串的子串</p><p>　　6、Symbol.search</p><p>　　一个在调用String.prototype.search()方法时调用的方法，用于在字符串中定位子串</p><p>　　7、Symbol.species</p><p>　　用于创建派生类的构造函数</p><p>　　8、Symbol.split</p><p>　　一个在调用String.prototype.split()方法时调用的方法，用于分割字符串</p><p>　　9、Symbol.toprimitive</p><p>　　一个返回对象原始值的方法</p><p>　　10、Symbol.ToStringTag</p><p>　　一个在调用Object.prototype.toString()方法时使用的字符串，用于创建对象描述</p><p>　　11、Symbol.unscopables</p><p>　　一个定义了一些不可被with语句引用的对象属性名称的对象集合</p>]]></content>
      
      
        <tags>
            
            <tag> Symbol </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>data-deconstruction</title>
      <link href="/2019/03/11/data-deconstruction/"/>
      <url>/2019/03/11/data-deconstruction/</url>
      <content type="html"><![CDATA[<h3 id="ES6—数据解构"><a href="#ES6—数据解构" class="headerlink" title="ES6—数据解构"></a>ES6—数据解构</h3><blockquote><p>来同质化的代码   解构赋值表达式的值与表达式右侧(也就是=右侧)的值相等，如此一来，在任何可以使用值的地方都可以使用解构赋值表达式<br>–对应，有就有 没有就不存在</p></blockquote><h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let  myObj = &#123;</span><br><span class="line">    type:&apos;name&apos;,</span><br><span class="line">    value:&apos;yongge&apos;</span><br><span class="line">&#125;</span><br><span class="line">let &#123; type, value, name&#125; = myObj</span><br><span class="line">console.log(type)  //</span><br><span class="line">console.log(value) //</span><br><span class="line">console.log(name)  // undefined</span><br></pre></td></tr></table></figure><blockquote><p>如果使用var、let、const解构声明变量，必须要提供初始化程序（也就是等号右侧的值），否则会导致程序抛出语法错误</p></blockquote><hr><blockquote><p>解构出来的变量 一定要是 对象中能够查找到的属性名 当指定的属性不存在时，可以随意定义一个默认值，在属性名称后添加一个等号(=)和相应的默认值即可  (直接定义个默认值)<br>如果解构出来的属性在对象中查找不到，值为undefined </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let  myObj = &#123;</span><br><span class="line">    type:&apos;name&apos;,</span><br><span class="line">    value:&apos;yongge&apos;</span><br><span class="line">&#125;</span><br><span class="line">let &#123; type, value, name=&apos;姓名&apos;&#125; = myObj</span><br><span class="line">console.log(type)  //</span><br><span class="line">console.log(value) //</span><br><span class="line">console.log(name)  //  姓名</span><br></pre></td></tr></table></figure><hr><blockquote><p>解构出来的变量虽然是跟属性名称相同，但是他不再是属性，而是外部的变量，这个变量名也可以被修改， 不一定要跟属性同名<br>上面的都是同名的变量     为非同名局部变量赋值<br>假如想要换个变量  右边 大括号里面 重新申明下  xx:oo  旧的名称 : 新的名称</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let  myObj = &#123;</span><br><span class="line">    type:&apos;name&apos;,</span><br><span class="line">    value:&apos;yongge&apos;</span><br><span class="line">&#125;</span><br><span class="line">let &#123; type:localType, value:localTValue&#125; = myObj</span><br><span class="line">console.log(localType)  //</span><br><span class="line">console.log(localTValue) //</span><br></pre></td></tr></table></figure><h4 id="嵌套对象解构"><a href="#嵌套对象解构" class="headerlink" title="嵌套对象解构"></a>嵌套对象解构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let myObj = &#123;</span><br><span class="line">    type:&apos;name&apos;,</span><br><span class="line">    value:&apos;yongge&apos;,</span><br><span class="line">    child:&#123;</span><br><span class="line">        firstObj:&#123;</span><br><span class="line">            childType:&apos;sex&apos;,</span><br><span class="line">            childValue:&apos;nan&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        secondObj:&#123;</span><br><span class="line">            childType:&apos;sex&apos;,</span><br><span class="line">            childValue:&apos;nv&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;child:&#123;firstObj:newObj&#125;&#125; = myObj</span><br><span class="line">console.log(newObj)  //</span><br></pre></td></tr></table></figure><blockquote><p>先找一层 在进一层找   可以 点 属性获取值</p></blockquote><h4 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h4><blockquote><p>为需要的元素提供变量名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&apos;red&apos;,&apos;green&apos;,&apos;blue&apos;]</span><br><span class="line">let [firstColor,secondColor] = colors;</span><br><span class="line">console.log(firstColor);//&quot;red&quot;</span><br><span class="line">console.log(secondColor);//&quot;green&quot;</span><br><span class="line"></span><br><span class="line">对于不需要的解构的值</span><br><span class="line"></span><br><span class="line">let [ , ,thirdColor] = colors</span><br><span class="line">console.log(thirdColor);</span><br></pre></td></tr></table></figure><blockquote><p>如果我们先声明了变量，之后也可以直接通过解构赋值修改变量的值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&apos;red&apos;,&apos;green&apos;,&apos;blue&apos;],firstColor = &apos;black&apos;,secondColor = &apos;yellow&apos;;</span><br><span class="line">[firstColor,secondColor] = colors;</span><br><span class="line"></span><br><span class="line">console.log(firstColor);//&quot;red&quot;</span><br><span class="line">console.log(secondColor);//&quot;green&quot;</span><br></pre></td></tr></table></figure><blockquote><p>可以在数组解构赋值表达式中为任意变量添加默认值。注意：：：：只有当该位置在右侧数组中的值不存在时或值为undefined时，默认值才会生效。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let colors = [&apos;red&apos;,&apos;green&apos;,&apos;blue&apos;];</span><br><span class="line">[firstColor,secondColor,thirdColor=&apos;orange&apos;] = colors;</span><br><span class="line"></span><br><span class="line">console.log(firstColor);//&quot;&quot;</span><br><span class="line">console.log(secondColor);//&quot;&quot;</span><br><span class="line">console.log(thirdColor);//&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="嵌套解构赋值"><a href="#嵌套解构赋值" class="headerlink" title="嵌套解构赋值"></a>嵌套解构赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arr = [ 10, [ 20, 30 ], 40 ];</span><br><span class="line">console.log( arr[1][1] ); //30</span><br><span class="line"></span><br><span class="line">let [ one, two, three, four ] = arr;</span><br><span class="line">console.log( one, two, three, four ); //</span><br><span class="line"></span><br><span class="line">[ one, [ two, three ], four ] = arr; //</span><br><span class="line">console.log( one, two, three, four ); //10 20 30 40</span><br></pre></td></tr></table></figure><h4 id="解构交换变量值"><a href="#解构交换变量值" class="headerlink" title="解构交换变量值"></a>解构交换变量值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a =10 , b = 8;</span><br><span class="line">[a,b]=[b,a]</span><br><span class="line">console.log(a,b)</span><br></pre></td></tr></table></figure><h4 id="解构中的不定参数-…"><a href="#解构中的不定参数-…" class="headerlink" title="解构中的不定参数(…)"></a>解构中的不定参数(…)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr =[10,20,30]</span><br><span class="line">let [first,...others ] = arr</span><br><span class="line">console.log(first,others)</span><br></pre></td></tr></table></figure><blockquote><p>复制数组</p></blockquote><p>ES5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [ 10, 20, 30 ];</span><br><span class="line">let newArr = arr.concat();</span><br><span class="line">console.log( newArr );</span><br></pre></td></tr></table></figure></p><blockquote><p>用解构与不定参数结合 复制 数组 </p></blockquote><p>ES6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [ 10, 20, 30 ];</span><br><span class="line">let [...newArr] = arr;</span><br><span class="line">console.log( newArr );</span><br></pre></td></tr></table></figure><h4 id="解构表达式传参"><a href="#解构表达式传参" class="headerlink" title="解构表达式传参"></a>解构表达式传参</h4><blockquote><p>方法 可以接受 解构表达式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function show (obj)&#123;</span><br><span class="line">    console.log(name,age)</span><br><span class="line">&#125;</span><br><span class="line">let obj = &#123;</span><br><span class="line">    name:&apos;yongge&apos;,</span><br><span class="line">    age:&apos;28&apos;</span><br><span class="line">&#125;</span><br><span class="line">show (&#123;name,age&#125; = obj)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 数据解构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise</title>
      <link href="/2018/09/08/Promise/"/>
      <url>/2018/09/08/Promise/</url>
      <content type="html"><![CDATA[<p>1、Promise标准中仅指定了Promise对象的then方法的行为，其它一切我们常见的方法/函数都并没有指定，包括catch，race，all等常用方法，甚至也没有指定该如何构造出一个Promise对象，另外then也没有一般实现中（Q, $q等）所支持的第三个参数，一般称onProgress<br>2、Promise的then方法返回一个新的Promise，而不是返回this</p>]]></content>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue_$emit</title>
      <link href="/2018/07/16/vue/"/>
      <url>/2018/07/16/vue/</url>
      <content type="html"><![CDATA[<p>1、父组件可以使用 props 把数据传给子组件。<br>2、子组件可以使用 $emit 触发父组件的自定义事件。</p><p>vm.$emit( event, arg ) //触发当前实例上的事件</p><p>vm.$on( event, fn );//监听event事件后运行 fn；</p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vuex</title>
      <link href="/2018/05/17/vuex/"/>
      <url>/2018/05/17/vuex/</url>
      <content type="html"><![CDATA[<h3 id="Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式。"><a href="#Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式。" class="headerlink" title="Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。"></a>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。</h3><p>传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p><h4 id="把组件的共享状态抽取出来，以一个全局单例模式管理"><a href="#把组件的共享状态抽取出来，以一个全局单例模式管理" class="headerlink" title="把组件的共享状态抽取出来，以一个全局单例模式管理"></a>把组件的共享状态抽取出来，以一个全局单例模式管理</h4>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js 变量</title>
      <link href="/2018/05/16/js-varuable/"/>
      <url>/2018/05/16/js-varuable/</url>
      <content type="html"><![CDATA[<h1 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h1><p>在 JavaScript 中, 作用域（scope，或译有效范围）就是变量和函数的可访问范围，即作用域控制着变量和函数的可见性和生命周期</p><h2 id="全局-局部作用域"><a href="#全局-局部作用域" class="headerlink" title="全局/局部作用域"></a>全局/局部作用域</h2><p>2.1 全局作用域(Global Scope)</p><p>（1）不在任何函数内定义的变量就具有全局作用域。<br>（2）实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性。<br>（3）window对象的内置属性都拥有全局作用域，例如 window.name、window.location、window.top 等。<br><img src="/img/1.png"></p><p>2.2 局部作用域(Local Scope)<br>（1）JavaScript的作用域是通过函数来定义的，在一个函数中定义的变量只对这个函数内部可见，称为函数（局部）作用域。</p><h2 id="全局-局部变量"><a href="#全局-局部变量" class="headerlink" title="全局/局部变量"></a>全局/局部变量</h2><p>3.1 全局变量</p><p>（1）在函数定义外声明的变量是全局变量。</p><p>（2）全局变量有 全局作用域，它的值可在整个程序中访问和修改。</p><p>（3）如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p><p>3.2 局部变量</p><p>（1）在函数定义内声明的变量是局部变量。</p><p>（2）因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p><p>（3）每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。</p><p>（4）函数外无法访问函数内的变量，函数内却可以访问函数外的变量。</p><p>全局变量</p><p>1、在函数定义外声明的变量是全局变量；全局变量有全局作用域，它的值可在整个程序中访问和修改。<br><img src="/img/2.png"><br>2、如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。<br><img src="/img/3.png"></p><p>局部变量</p><p>1、因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。<br><img src="/img/5.png"></p><p>2、每当执行函数时，都会创建和销毁该变量，且无法通过函数之外的任何代码访问该变量。<br><img src="/img/6.png"></p><p>3、函数外无法访问函数内的变量，函数内却可以访问函数外的变量。(闭包)<br><img src="/img/7.png"></p><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>块级作用域指在If语句，switch语句，循环语句等语句块中定义变量，这意味着变量不能在语句块之外被访问。</p><p>4 <code>var 不支持块级作用域</code></p><p>（1）在If等语句块中，定义的变量从属于该块所在的作用域，和函数不同，他们不会创建新的作用域。<br><img src="/img/11.png"></p><p><code>let和const</code></p><p>（1）为了解决块级作用域，ES6引入了 let 和 const 关键字，可以声明一个块级作用域的变量。<br><img src="/img/12.png"><br>（2）<strong>*</strong>全局作用域的生存周期与上述应用相同。局部作用域只在该函数调用执行期间存在。<strong>*</strong></p><h2 id="七、上下文-vs-作用域"><a href="#七、上下文-vs-作用域" class="headerlink" title="七、上下文 vs 作用域"></a>七、上下文 vs 作用域</h2><p>（1）首先需要说明的是上下文和作用域是不同的概念。</p><p>（2）每个函数调用都有与之相关的作用域和上下文。从根本上说，作用域是基于函数，而上下文是基于对象。</p><p>（3）作用域是和每次函数调用时变量的访问有关，并且每次调用都是独立的。上下文总是关键字 this 的值，是调用当前可执行代码的对象的引用。</p><h2 id="八、“this”-上下文"><a href="#八、“this”-上下文" class="headerlink" title="八、“this” 上下文"></a>八、“this” 上下文</h2><p>（1）上下文通常是取决于一个函数如何被调用。当函数作为对象的方法被调用时，this 指向调用方法的对象。<br><img src="/img/13.png"></p><p>（2）当调用一个函数时，通过 new 操作符创建一个对象的实例，当以这种方式调用时，this 指向新创建的实例。<br><img src="/img/14.png"></p><p>（3）当调用一个未绑定函数，this 默认指向全局上下文或者浏览器中的window对象。然而如果函数在严格模式下被执行(“use strict”)，this 默认指向 undefined。</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>1）当函数执行时，会创建一个称为执行上下文的内部对象（可理解为作用域，不是前面讨论的上下文）。一个执行上下文定义了一个函数执行时的环境。</p><p>（2）函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文。</p><p>（3）当javascript代码文件被浏览器载入后，默认最先进入的是一个全局的执行上下文。当在全局上下文中调用执行一个函数时，程序流就进入该被调用函数内，此时引擎就会为该函数创建一个新的执行上下文，并且将其压入到执行栈顶部（作用域链）。浏览器总是执行位于执行栈顶部的当前执行上下文，一旦执行完毕，该执行上下文就会从执行栈顶部弹出，并且控制权将进入其下的执行上下文。这样，执行栈中的执行上下文就会被依次执行并且弹出，直到回到全局的执行上下文。</p><p>十、作用域链</p><p>（1）在JavaScript中，函数也是对象，对象中有些属性我们可以访问，但有些不可以（访问），这些属性仅供JavaScript引擎存取，[[scope]]就是其中一个。</p><p>（2）[[scope]]指的就是我们所说的作用域，其中存储了执行上下文的集合。</p><p>（3）[[scope]]中所存储的执行上下文对象的集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。<br><img src="/img/15.png"></p><p>（1）运行示例代码将会导致嵌套的函数被从上倒下执行，一直到 fourth 函数，此时作用域链从上到下为： fourth, third, second, first, global。</p><p>（2）fourth 函数能够访问全局变量和任何定义在first,second和third函数中的变量（和访问自己的变量一样）。</p><p>（3）一旦fourth函数执行完成，其就会从作用域链顶部移除，并且执行权会返回到third函数。这个过程一直持续到所有代码完成执行。</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-etc</title>
      <link href="/2018/05/09/vue-etc/"/>
      <url>/2018/05/09/vue-etc/</url>
      <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><pre><code>MVVM 是Model-View-ViewModel 的缩写，它是一种基于前端开发的架构模式，其核心是提供对View 和 ViewModel 的双向数据绑定，这使得ViewModel 的状态改变可以自动传递给 View，即所谓的数据双向绑定。</code></pre><p><img src="/img/1050920-20161207111940601-1823413171.png"></p><h3 id="vue-生命周期"><a href="#vue-生命周期" class="headerlink" title="vue 生命周期"></a>vue 生命周期</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdn.jsdelivr.net/vue/2.1.3/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">     &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    </span><br><span class="line">  var app = new Vue(&#123;</span><br><span class="line">      el: <span class="string">'#app'</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">          message : <span class="string">"xuxiao is boy"</span> </span><br><span class="line">      &#125;,</span><br><span class="line">       beforeCreate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">                console.group(<span class="string">'beforeCreate 创建前状态===============》'</span>);</span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span> , <span class="string">"el     : "</span> + this.<span class="variable">$el</span>); //undefined</span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //undefined </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message)  </span><br><span class="line">        &#125;,</span><br><span class="line">        created: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            console.group(<span class="string">'created 创建完毕状态===============》'</span>);</span><br><span class="line">            console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + this.<span class="variable">$el</span>); //undefined</span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //已被初始化 </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message); //已被初始化</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeMount: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            console.group(<span class="string">'beforeMount 挂载前状态===============》'</span>);</span><br><span class="line">            console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + (this.<span class="variable">$el</span>)); //已被初始化</span><br><span class="line">            console.log(this.<span class="variable">$el</span>);</span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //已被初始化  </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message); //已被初始化  </span><br><span class="line">        &#125;,</span><br><span class="line">        mounted: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            console.group(<span class="string">'mounted 挂载结束状态===============》'</span>);</span><br><span class="line">            console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + this.<span class="variable">$el</span>); //已被初始化</span><br><span class="line">            console.log(this.<span class="variable">$el</span>);    </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); //已被初始化</span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message); //已被初始化 </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeUpdate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            console.group(<span class="string">'beforeUpdate 更新前状态===============》'</span>);</span><br><span class="line">            console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">            console.log(this.<span class="variable">$el</span>);   </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        updated: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            console.group(<span class="string">'updated 更新完成状态===============》'</span>);</span><br><span class="line">            console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">            console.log(this.<span class="variable">$el</span>); </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            console.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span><br><span class="line">            console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">            console.log(this.<span class="variable">$el</span>);    </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message); </span><br><span class="line">        &#125;,</span><br><span class="line">        destroyed: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">            console.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span><br><span class="line">            console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + this.<span class="variable">$el</span>);</span><br><span class="line">            console.log(this.<span class="variable">$el</span>);  </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + this.<span class="variable">$data</span>); </span><br><span class="line">               console.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + this.message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><pre><code>***    beforecreated：el 和 data 并未初始化     created:完成了 data 数据的初始化，el没有    beforeMount：完成了 el 和 data 初始化     mounted ：完成挂载    另外在标红处，我们能发现el还是 {{message}}，这里就是应用的 Virtual DOM（虚拟Dom）技术，先把坑占住了。    到后面mounted挂载的时候再把值渲染进去。</code></pre><div style="color:red;box-shadow:10px 10px 13px #0D2133;border-radius:6px;line-height:35px;margin-bottom:10px;overflow:hidden"><br>beforecreate : 举个栗子：可以在这加个loading事件<br>created ：在这结束loading，还做一些初始化，实现函数自执行<br>mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情<br>beforeDestroy： 你确认删除XX吗？ destroyed ：当前组件已被删除，清空相关内容</div><p>1、什么是vue生命周期？<br>答： Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p><p>2、vue生命周期的作用是什么？<br>答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。</p><p>3、vue生命周期总共有几个阶段？<br>答：它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后</p><p>4、第一次页面加载会触发哪几个钩子？<br>答：第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子</p><p>5、DOM 渲染在 哪个周期中就已经完成？<br>答：DOM 渲染在 mounted 中就已经完成了。</p><p>6、简单描述每个周期具体适合哪些场景？<br>答：生命周期钩子的一些使用方法： beforecreate : 可以在这加个loading事件，在加载实例时触发 created : 初始化完成时的事件写在这里，<br>如在这结束loading事件，异步请求也适宜在这里调用 mounted : 挂载元素，获取到DOM节点 updated : 如果对数据统一处理，在这里写上相应函数 beforeDestroy :<br>可以做一个确认停止事件的确认框 nextTick : 更新数据后立即操作dom</p><p>More info: <a href="https://segmentfault.com/a/1190000008771768?_ea=1739750" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-动态组件</title>
      <link href="/2018/03/11/vue-components/"/>
      <url>/2018/03/11/vue-components/</url>
      <content type="html"><![CDATA[<h4 id="组件（Component）是-Vue-js-最强大的功能之一，介绍一些更强大的扩展。"><a href="#组件（Component）是-Vue-js-最强大的功能之一，介绍一些更强大的扩展。" class="headerlink" title="组件（Component）是 Vue.js 最强大的功能之一，介绍一些更强大的扩展。"></a>组件（Component）是 Vue.js 最强大的功能之一，介绍一些更强大的扩展。</h4><p>父组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"singer"</span>&gt;</span><br><span class="line">&lt;list-view :data=<span class="string">"singers"</span> ref=<span class="string">"list"</span>&gt;&lt;/list-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">import ListView from 'base/</span>listview/listview<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">components: &#123;</span></span><br><span class="line"><span class="string">ListView</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h2><p>1.props<br> father.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;child :msg=&quot;message&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import child from &apos;./child.vue&apos;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        child</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            message: &apos;father message&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p> 子组件vue模板child.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        msg: &#123;</span><br><span class="line">            type: String,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2 使用$children</p><h2 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h2><p>1.父组件向子组件传递事件方法，子组件通过$emit触发事件，回调给父组件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;child @msgFunc=&quot;func&quot;&gt;&lt;/child&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import child from &apos;./child.vue&apos;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        child</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        func (msg) &#123;</span><br><span class="line">            console.log(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件模板 child.vue<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;handleClick&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        msg: &#123;</span><br><span class="line">            type: String,</span><br><span class="line">            required: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods () &#123;</span><br><span class="line">        handleClick () &#123;</span><br><span class="line">            //........</span><br><span class="line">            this.$emit(&apos;msgFunc&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="非父子组件、兄弟组件之间的数据传递"><a href="#非父子组件、兄弟组件之间的数据传递" class="headerlink" title="非父子组件、兄弟组件之间的数据传递"></a>非父子组件、兄弟组件之间的数据传递</h3><p>$on方法用来监听一个事件。</p><p>$emit用来触发一个事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/*新建一个Vue实例作为中央事件总嫌*/</span><br><span class="line">let event = new Vue();</span><br><span class="line"></span><br><span class="line">/*监听事件*/</span><br><span class="line">event.$on(&apos;eventName&apos;, (val) =&gt; &#123;</span><br><span class="line">    //......do something</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/*触发事件*/</span><br><span class="line">event.$emit(&apos;eventName&apos;, &apos;this is a message.&apos;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>闭包  变量</title>
      <link href="/2018/02/11/closure/"/>
      <url>/2018/02/11/closure/</url>
      <content type="html"><![CDATA[<p>##闭包就是functions that return function<br>(是输出而是返回一个函数) f()()<br>变量的作用域无非就是两种：全局变量和局部变量。</p><pre><code>函数内部可以直接读取全局变量。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var n = 1;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">  console.log(n)</span><br><span class="line">&#125;</span><br><span class="line">f1(); // 1</span><br></pre></td></tr></table></figure><pre><code>在函数外部自然无法读取函数内的局部变量**函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量**</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">　　　　var n=1;</span><br><span class="line">　　&#125;</span><br><span class="line">　　alert(n); // error</span><br></pre></td></tr></table></figure><h3 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h3><pre><code>函数的内部，再定义一个函数。</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">　　　　var n=2;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">　　　　　　alert(n); // 2</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">----</span><br><span class="line">　　<span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>()&#123;</span><br><span class="line">　　　　var n=1;</span><br><span class="line">　　　　<span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>()&#123;</span><br><span class="line">　　　　　　alert(n); </span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="built_in">return</span> f2;</span><br><span class="line">　　&#125;</span><br><span class="line">　　var result=f1();</span><br><span class="line">　　result(); // 1</span><br></pre></td></tr></table></figure><p>函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。<br>这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><pre><code>@闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</code></pre><h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>]]></content>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Array-排序</title>
      <link href="/2018/02/10/Array-sort/"/>
      <url>/2018/02/10/Array-sort/</url>
      <content type="html"><![CDATA[<h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">-8</span>,<span class="number">-3</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">9</span>,<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">val1,val2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val1-val2;</span><br><span class="line">&#125;;</span><br><span class="line">array.sort(compare);</span><br><span class="line"><span class="built_in">document</span>.write(array);<span class="comment">// -8 -3 1 4...</span></span><br></pre></td></tr></table></figure><p>sort()方法按照升序排列数组项，会调用每个数组项的toString()转型方法，然后比较得到的字符串。</p><p>toString()方法是把布尔值或BooleanObject转换为字符串，并返回结果。</p><p>compare()函数方法是一个比较函数，作为sort()方法的参数。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class="line">function sort(arr)&#123;</span><br><span class="line">for(var j =0; j&lt;arr.length;j++)&#123;</span><br><span class="line">for(var i=0;i&lt;arr.length-1-j;i++)&#123;</span><br><span class="line">if(arr[i]&gt;arr[i+1])&#123;</span><br><span class="line">                var temp = arr[i];</span><br><span class="line">                arr[i] = arr[i+1];</span><br><span class="line">                arr[i+1] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(array);</span><br><span class="line">document.write(array);</span><br></pre></td></tr></table></figure><p>（1）比较相邻的元素。如果第一个比第二个大，就交换他们两个位置。<br>（2）对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。<br>（3）针对所有的元素重复以上的步骤，除了最后一个。<br>（4）持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var array = [1,4,-8,-3,6,12,9,8];</span><br><span class="line">function quickSort(arr)&#123;</span><br><span class="line">//如果数组长度小于等于1，则返回数组本身</span><br><span class="line">    if(arr.length&lt;=1)&#123;</span><br><span class="line">        return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    //定义中间值的索引</span><br><span class="line">    var index = Math.floor(arr.length/2);</span><br><span class="line">    //取到中间值</span><br><span class="line">    var temp = arr.splice(index,1);</span><br><span class="line">    //定义左右部分数组</span><br><span class="line">    var left = [];</span><br><span class="line">    var right = [];</span><br><span class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">    //如果元素比中间值小，那么放在左边，否则放右边</span><br><span class="line">        if(arr[i]&lt;temp)&#123;</span><br><span class="line">            left.push(arr[i]);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            right.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return quickSort(left).concat(temp,quickSort(right));</span><br><span class="line">&#125;</span><br><span class="line">document.write(quickSort(array));</span><br></pre></td></tr></table></figure><p>Math.floor(x)方法是向下取整，返回小于或等于x的最接近的整数。</p><p>splice(index,num,item)方法是向数组中添加项目，或是从数组中删除项目，并返回被删除的项目。</p><p>index是整数，被操作项目所在的位置（必须）<br>num是整数，要删除的项目的数量，如果为0，表示不删除（必须）<br>item是向数组中添加的新项目，可以是多个（可选）<br>push()方法是向数组末尾添加一个或多个新项目并返回新数组的长度</p><p>concat()方法连接两个或多个数组，不会改变原有数组，返回一个新数组</p><p><code>continue</code></p>]]></content>
      
      
        <tags>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Array-去重</title>
      <link href="/2018/01/09/Array-unique/"/>
      <url>/2018/01/09/Array-unique/</url>
      <content type="html"><![CDATA[]]></content>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css3-新特性</title>
      <link href="/2018/01/08/css3-new-feature/"/>
      <url>/2018/01/08/css3-new-feature/</url>
      <content type="html"><![CDATA[<h3 id="CSS3的新特性大致分为以下六类"><a href="#CSS3的新特性大致分为以下六类" class="headerlink" title="CSS3的新特性大致分为以下六类"></a>CSS3的新特性大致分为以下六类</h3><h1 id="1-CSS3选择器"><a href="#1-CSS3选择器" class="headerlink" title="1.CSS3选择器"></a>1.CSS3选择器</h1><p>基本选择器，属性选择器，伪类选择器，nth选择器</p><h1 id="2-CSS3边框与圆角"><a href="#2-CSS3边框与圆角" class="headerlink" title="2.CSS3边框与圆角"></a>2.CSS3边框与圆角</h1><p>1.CSS3圆角border-radius</p><pre><code>定义：可以为元素添加圆角边框（块元素，行内块元素，行内元素）</code></pre><p>属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">border-top-left-radius 左上角</span><br><span class="line">border-top-right-radius 右上角</span><br><span class="line">border-bottom-right-radius 右下角</span><br><span class="line">border-bottom-left-radius 左下角</span><br></pre></td></tr></table></figure></p><p>复合属性：border-radius：<br>属性值 </p><p>四个值：左上角 右上角 右下角 左下角<br>三个值：左上角 右上角和左下角 右下角<br>两个值：左上角和右下角 右上角和左下角<br>一个值：4个角都生效</p><p>border-radius中的属性值由两个参数值构成: value1 / value2，值之间用/分隔，value1代表圆角的水平半径，value2代表圆角的垂直半径。</p><p>2.盒阴影box-shadow </p><pre><code>定义：可以控制一个或多个下拉阴影的框语法：box-shadow: 水平方向的偏移量 垂直方向的偏移量 模糊程度 扩展程度 颜色 是否具有内阴影</code></pre><h1 id="3-CSS3背景与渐变"><a href="#3-CSS3背景与渐变" class="headerlink" title="3.CSS3背景与渐变"></a>3.CSS3背景与渐变</h1><p>1.CSS3背景</p><p>background-image<br>语法：<br>backgroundimage:url(‘1.jpg),url(‘2.jpg’)<br>使用逗号把图片分开<br>注意：元素引入多个背景图片，前面图片会覆盖后面的图片<br>background-cilp<br>定义：指定背景的绘制区域（裁剪）<br>语法：<br>background-cilp：border-box / padding-box / content-box<br>属性介绍：<br>border-box：背景被裁剪到边框盒（从边框开始绘制背景图片）—默认<br>padding-box：背景被裁剪到内边距框（从内边距开始绘制背景图片）<br>content-box：背景被裁剪到内容框<br>background-origin<br>定义：设置背景图像的原始起始位置<br>语法：<br>background-origin：border-box / padding-box / content-box(背景图片坐标原点与这三个有关系)<br>属性的介绍：<br>border-box：相对于边框来定位<br>padding-box：相对于内边距来定位<br>content-box：相对于内容框来定位<br>另外有一个需要了解<br>background-position:定义背景图片的位置，水平与垂直方向上面的偏移量(参考点)<br>background-repeat<br>定义：设置是否及如何重复背景图像，默认地，背景图像在水平和垂直方向上重复。</p><p>属性值：<br>repeat 默认。背景图像将在垂直方向和水平方向重复。<br>repeat-x 背景图像将在水平方向重复。<br>repeat-y 背景图像将在垂直方向重复。<br>no-repeat 背景图像将仅显示一次。<br>inherit 规定应该从父元素继承 background-repeat 属性的设置</p><p>background-size<br>定义：指定背景图像的大小<br>语法：<br>background-size：number / % / cover / contain<br>属性介绍：<br>number: 宽度 高度（如果只写一个数值，第二个数值默认auto）<br>百分比： 0% - 100% 之间的任何值，此时的百分比参照于元素div的大小<br>cover：将背景图片等比缩放以填满整个容器（最远边），如果高度达到一定比例100%，宽度多出的会溢出，但是，具体那部分溢出取决于定位<br>contain：将背景图片等比缩放至某一边紧贴容器边缘为止（最近边），如果图片高度比较小，高度就会有空白区域出现<br>复合属性background<br>定义：可以在一个声明中设置所有的背景属性<br>语法：<br>background：color position size repeat origin clip attachment image; background: #abc center 50% no-repeat content-box content-box fixed url(‘1.jpg’) ,url(‘2.jpg’)…</p><p>2.CSS3渐变</p><p>定义：可以在两个或者多个指定颜色之间显示平移的过渡</p><p>线性渐变<br>定义：是沿着一根轴线改变颜色，从起点到终点进行顺序渐变（从一边拉向另一边）<br>语法：background:linear-gradient(方向，开始颜色，结束颜色)</p><p>方向介绍：</p><p>1.方向从上到下（默认）<br>background: linear-gradient(red,blue);<br>2.方向从左到右<br>background: linear-gradient(to right,red,blue);<br>3.对角<br>background: linear-gradient(to right bottom,red,blue);<br>4.角度(单位deg)<br>background: linear-gradient(角度,red,blue);<br>角度说明：0deg 将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变</p><p>颜色结点：默认每个颜色均匀分布</p><p>background: linear-gradient(red 10%,blue 20%,green 30%,yellow 40%);<br>从0%到10%，为红色，从10%到20%为红色到蓝色的渐变，从20%到30%为蓝色到绿色的渐变，从30%到40%，为绿色到黄色的渐变,从40%到100%为黄色<br>background: linear-gradient(red 10%,blue);<br>从0%到10%，为红色，从10%到100%为红色到蓝色的渐变<br>最后如果不写具体数值，默认到100%<br>background: linear-gradient(red,blue 30%);<br>从0%到30%，为红色到蓝色的渐变<br>如果第一个不写，默认数值是 0%<br>background:lineargradient(rgba(255,0,0,0),rgba(255,0,0,1));<br>由透明色变为不透明色</p><p>重复渐变</p><p>示例：background: repeating-linear-gradient(90deg,red 0%,blue 20%);或者 background: repeating-linear-gradient(90deg,red 0%,blue 10%,red 20%);<br>注意：把元素的整体宽度看成100%</p><p>径向渐变<br>定义：从起点到终点，颜色从内向外进行圆形渐变<br>语法：background:radial-gradient(形状尺寸，开始颜色，结束颜色)<br>形状分类：<br>circle — 圆形<br>ellipse — 椭圆形<br>注意：当元素的高和宽一样时，参数无论设置哪个，都是圆形</p><p>尺寸大小：<br>closest-side最近边<br>background: radial-gradient(closest-side circle,red , blue);<br>farthest-side 最远边<br>background: radial-gradient(farthest-side circle,red , blue);<br>closest-corner最近角<br>background: radial-gradient(closest-corner circle,red , blue);<br>farthest-corner最远角<br>background: radial-gradient(farthest-corner circle,red , blue);</p><p>颜色结点：<br>例：<br>background:radial-gradient(circle,red 50% ,blue 70%);<br>注意：此时的百分比,指的是圆心到元素最远端的距离（角度）</p><p>重复渐变 ：<br>示例： background: repeating-radial-gradient(red 0%,blue 20%);<br>background: repeating-radial-gradient(red 0%,blue 10%,red 20%);</p><h1 id="4-CSS3动画"><a href="#4-CSS3动画" class="headerlink" title="4.CSS3动画"></a>4.CSS3动画</h1>]]></content>
      
      
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>New-start</title>
      <link href="/2018/01/01/New-start/"/>
      <url>/2018/01/01/New-start/</url>
      <content type="html"><![CDATA[<p>我可以记录我自己的想法，喜不喜欢则是你的自由</p><h4 id="又是新的一年呢。"><a href="#又是新的一年呢。" class="headerlink" title="又是新的一年呢。"></a>又是新的一年呢。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run  start</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello-world</title>
      <link href="/2017/01/01/hello-world/"/>
      <url>/2017/01/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
